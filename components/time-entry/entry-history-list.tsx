import { TimeEntry, TimeEntryType } from "@/types/time-entry"
import { formatTime } from "@/lib/date-utils"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"

interface EntryHistoryListProps {
  entries: TimeEntry[]
}

// Mapeo de tipos de entrada a textos descriptivos y colores de badge
const entryTypeInfo: Record<TimeEntryType, { label: string, variant: "default" | "secondary" | "outline" | "destructive" }> = {
  "entrada": { label: "Entrada", variant: "default" },
  "pausaCafe": { label: "Pausa Café", variant: "secondary" },
  "pausaComida": { label: "Pausa Comida", variant: "secondary" },
  "otros": { label: "Otros", variant: "outline" },
  "salida": { label: "Salida", variant: "destructive" },
}

export function EntryHistoryList({ entries }: EntryHistoryListProps) {
  if (entries.length === 0) {
    return (
      <div className="text-center py-6 text-muted-foreground">
        No hay registros para hoy
      </div>
    )
  }

  // Ordenar por timestamp descendente (más reciente primero)
  const sortedEntries = [...entries].sort((a, b) => 
    b.timestamp.getTime() - a.timestamp.getTime()
  )

  return (
    <ScrollArea className="h-[300px]">
      <div className="space-y-3">
        {sortedEntries.map((entry) => {
          const { label, variant } = entryTypeInfo[entry.type]
          
          return (
            <div 
              key={entry.id} 
              className="flex items-center justify-between border-b pb-2"
            >
              <div className="flex items-center space-x-3">
                <Badge variant={variant}>{label}</Badge>
                {entry.notes && (
                  <span className="text-sm text-muted-foreground line-clamp-1">
                    {entry.notes}
                  </span>
                )}
              </div>
              <div className="text-sm font-mono">
                {formatTime(entry.timestamp)}
              </div>
            </div>
          )
        })}
      </div>
    </ScrollArea>
  )
}

// Generated by Copilot
