-- Create enum type for entry types
create type time_entry_type as enum ('entrada', 'pausaCafe', 'pausaComida', 'otros', 'salida');

-- Create time_entries table
create table if not exists time_entries (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id) on delete cascade not null,
  type time_entry_type not null,
  timestamp timestamptz not null default now(),
  notes text,
  created_at timestamptz not null default now()
);

-- Add RLS policies
alter table time_entries enable row level security;

-- Policy to allow users to read their own time entries
create policy "Users can read their own time entries"
  on time_entries
  for select
  using (auth.uid() = user_id);

-- Policy to allow users to insert their own time entries
create policy "Users can insert their own time entries"
  on time_entries
  for insert
  with check (auth.uid() = user_id);

-- Policy to allow users to update their own time entries
create policy "Users can update their own time entries"
  on time_entries
  for update
  using (auth.uid() = user_id);

-- Create daily_summaries table for analytics and reporting
create table if not exists daily_summaries (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id) on delete cascade not null,
  date date not null,
  total_time int not null default 0, -- in seconds
  start_time timestamptz,
  end_time timestamptz,
  breaks_count int not null default 0,
  breaks_time int not null default 0, -- in seconds
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  
  -- Unique constraint to ensure only one summary per user per day
  unique(user_id, date)
);

-- Add RLS policies for daily_summaries
alter table daily_summaries enable row level security;

-- Policy to allow users to read their own daily summaries
create policy "Users can read their own daily summaries"
  on daily_summaries
  for select
  using (auth.uid() = user_id);

-- Function to automatically update daily summary when time entries change
create or replace function update_daily_summary()
returns trigger as $$
declare
  entry_date date;
  summary_id uuid;
  total_seconds int;
  breaks_count_val int;
  breaks_time_val int;
  start_time_val timestamptz;
  end_time_val timestamptz;
begin
  -- Get the date from the timestamp
  entry_date := date(NEW.timestamp);
  
  -- Check if a summary already exists for this user and date
  select id into summary_id from daily_summaries 
  where user_id = NEW.user_id and date = entry_date;
  
  -- Calculate metrics
  select 
    count(*) filter (where type in ('pausaCafe', 'pausaComida', 'otros')),
    coalesce(extract(epoch from sum(case 
      when type in ('pausaCafe', 'pausaComida', 'otros') then interval '15 minutes' 
      else interval '0' 
    end))::int, 0),
    min(timestamp) filter (where type = 'entrada'),
    max(timestamp) filter (where type = 'salida')
  into 
    breaks_count_val, breaks_time_val, start_time_val, end_time_val
  from time_entries
  where user_id = NEW.user_id and date(timestamp) = entry_date;
  
  -- Calculate total time (only if we have both start and end)
  if start_time_val is not null and end_time_val is not null then
    total_seconds := extract(epoch from (end_time_val - start_time_val))::int - breaks_time_val;
    if total_seconds < 0 then total_seconds := 0; end if;
  else
    total_seconds := 0;
  end if;
  
  -- Insert or update summary
  if summary_id is null then
    insert into daily_summaries (
      user_id, date, total_time, start_time, end_time, 
      breaks_count, breaks_time
    ) values (
      NEW.user_id, entry_date, total_seconds, start_time_val, end_time_val,
      breaks_count_val, breaks_time_val
    );
  else
    update daily_summaries
    set 
      total_time = total_seconds,
      start_time = start_time_val,
      end_time = end_time_val,
      breaks_count = breaks_count_val,
      breaks_time = breaks_time_val,
      updated_at = now()
    where id = summary_id;
  end if;
  
  return NEW;
end;
$$ language plpgsql;

-- Create trigger to update daily summary on time entry changes
create trigger time_entry_summary_update
after insert or update on time_entries
for each row
execute function update_daily_summary();

-- Index for performance
create index if not exists time_entries_user_id_timestamp_idx 
  on time_entries(user_id, timestamp);
create index if not exists daily_summaries_user_id_date_idx 
  on daily_summaries(user_id, date);

-- Generated by Copilot

CREATE POLICY "Allow authenticated users to insert daily summaries" 
ON daily_summaries 
FOR INSERT 
TO authenticated 
WITH CHECK (true);