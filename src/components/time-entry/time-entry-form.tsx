import { useState } from "react"
import { TimeEntryButton } from "@/components/time-entry/time-entry-button"
import { TimeEntryType } from "@/types/time-entry"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { cn } from "@/lib/utils"

interface TimeEntryFormProps {
  onSubmit: (type: TimeEntryType, notes?: string) => Promise<void>
  isLoading: boolean
  hasActiveWorkday: boolean
}

export function TimeEntryForm({ onSubmit, isLoading, hasActiveWorkday }: TimeEntryFormProps) {
  const [notes, setNotes] = useState("")
  const [showNotes, setShowNotes] = useState(false)
  
  const handleSubmit = async (type: TimeEntryType) => {
    try {
      await onSubmit(type, notes.trim() || undefined)
      setNotes("")
      setShowNotes(false)
    } catch (error) {
      console.error("Error submitting time entry:", error)
    }
  }

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        <TimeEntryButton 
          type="entrada" 
          onClick={() => handleSubmit("entrada")} 
          disabled={isLoading || hasActiveWorkday} 
        />
        <TimeEntryButton 
          type="salida" 
          onClick={() => handleSubmit("salida")} 
          disabled={isLoading || !hasActiveWorkday} 
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <TimeEntryButton 
          type="pausaCafe" 
          onClick={() => handleSubmit("pausaCafe")} 
          disabled={isLoading || !hasActiveWorkday} 
        />
        <TimeEntryButton 
          type="pausaComida" 
          onClick={() => handleSubmit("pausaComida")} 
          disabled={isLoading || !hasActiveWorkday} 
        />
        <TimeEntryButton 
          type="otros" 
          onClick={() => handleSubmit("otros")} 
          disabled={isLoading || !hasActiveWorkday} 
        />
      </div>

      <div className="flex items-center justify-center mt-4">
        <Button 
          variant="ghost" 
          size="sm" 
          type="button" 
          onClick={() => setShowNotes(!showNotes)}
          className="text-sm"
        >
          {showNotes ? "Ocultar notas" : "Añadir nota"}
        </Button>
      </div>

      {showNotes && (
        <div className="mt-2 space-y-2">
          <Label htmlFor="notes">Notas adicionales:</Label>
          <Textarea 
            id="notes"
            placeholder="Añade detalles sobre esta entrada..."
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            rows={3}
            className={cn(
              "resize-none",
              isLoading && "opacity-50"
            )}
            disabled={isLoading}
          />
        </div>
      )}
    </div>
  )
}

// Generated by Copilot
